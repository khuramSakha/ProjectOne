function addCountryListControl() {
    L.Control.CountryList = L.Control.extend({
        onAdd: function () {
            return $select = $('<select id="countryList" class="form-control leaflet-control leaflet-bar" onchange="validateCountry(this.value)"></select>'), $select.append(`<option value="" data="">Select Country</option>`), $select.get(0)
        }
    }), L.control.countryList = function (t) {
        return new L.Control.CountryList(t)
    }, L.control.countryList({
        position: "topleft"
    }).addTo(map), L.DomEvent.disableClickPropagation($("#countryList").get(0))

}

function checkURLHash() {


    location.hash ? (hash = decodeURI(location.hash.substring(1)), validateCountry(hash)) : map.locate();
    
    //console.log(map.locate());
    // location.hash ? (hash = decodeURI(location.hash.substring(1)), validateCountry(hash)) : (hash = decodeURI(location.hash.substring(1)), validateCountry(hash)): map.locate();
    //  location.hash ? (hash = decodeURI(location.hash.substring(1)), validateCountry(hash)) : map.locate();
    // $.ajax({
    //     url : './php/currentLocation.php',
    //     method: "GET",
    //     dataType: 'json',
    //     beforeSend: function() {
    //         console.log('waiitttt...')
    //     }
    // }).done(res => {
    //     // location.hash ? (hash = decodeURI(location.hash.substring(1)), validateCountry(hash)) : map.locate();
    // });

}

function convertTime(t, e) {
    const o = new Date(1e3 * (t + e));
    let n = o.getUTCHours();
    n = n < 10 ? `0${n}` : n;
    let a = o.getUTCMinutes();
    return a = a < 10 ? `0${a}` : a, `${n}:${a}`
}

function displayBorders() {

    const t = countryData.borders.geometry;
    const country_nam = countryData.borders.properties.name;
   
   // $("#countryList").html();
    $("#countryList :selected").text(country_nam);


    let e = [];


    "MultiPolygon" === t.type ? t.coordinates.forEach(t => {
        let o = [];
        t[0].forEach(t => {
            const e = t[1],
                n = t[0];
            o.push([e, n])
        }), e.push(o)
    }) : t.coordinates[0].forEach(t => {
        const o = t[0],
            n = t[1];
        e.push([n, o])
    }), map.fitBounds(e), window.borders = L.polygon(e, {
        bubblingMouseEvents: !1,
        color: 'darkred',
        fillColor: 'darkred',
        fillOpacity: 0.1,
        weight: 3
      


    }).addTo(map), L.DomEvent.disableClickPropagation($(window.borders).get(0));

    // L.marker([countryData.opencage.geometry.lat, countryData.opencage.geometry.lng]).addTo(map)
    //     .bindPopup(countryData.covid.country + " &nbsp;<img src='https://flagcdn.com/" + countryData.opencage.components.country_code.toLowerCase() + ".svg' style='width:25px'><br> Lat:" + countryData.opencage.geometry.lat + ",Lng:" + countryData.opencage.geometry.lng)
    //     .openPopup();







}

function displayCountryInfo() {
    const t = countryData.opencage,
        e = countryData.rest;
    let o = {};
    callcode = t.annotations.callingcode || null, o.callingCode = callcode ? `+${callcode}` : null, o.capital = e.capital || null, o.continent = t.components.continent || null, o.countryCode = t.components.country_code || null, o.demonym = e.demonym || null;
    let n = e.area || null;
    n && (n = formatNumber(n), o.landArea = n);
    let a = [];
    e.languages.forEach(t => a.push(t.name)), a.length > 1 ? (o.languages = a.join(", "), o.language = null) : (o.language = a[0], o.languages = null);
    let r = e.population || null;
    r && (o.population = formatNumber(r)), o.tld = e.topLevelDomain[0] || null;
    const i = t.annotations.timezone.short_name || null;
    let l = t.annotations.timezone.offset_string || null;
    l = l ? `(${l})` : null, o.tz = `${i} ${l}`, $("#countryFlag").attr("src", e.flag),$("#countryName").text(countryName);
    for (let t in o) o[t] ? ($(`#${t}`).html(o[t]), $(`#${t}Row`).show()) : $(`#${t}Row`).hide();
    o.wiki = countryData.wiki || null, $("#wiki").attr("href", o.wiki), displayMainCurrency()
}



function displayCovid() {
    const covid = countryData.covid;
    console.log(covid.country);
    let data = {};

   

    // lastEntry = covid.length - 1;
    // recent = covid[lastEntry];
    // prevD = covid[lastEntry - 1];
    // prevW = covid[lastEntry - 7];
    // prevM = covid[lastEntry - 30];
    // data.latestDate = recent.date;
    data.tC = formatNumber(covid.cases);
    data.tD = formatNumber(covid.deaths);
    data.tR = formatNumber(covid.recovered);
    // data.lC = formatNumber(recent.confirmed - prevD.confirmed);
    // data.lD = formatNumber(covid.deaths - prevD.deaths);
    // data.lR = formatNumber(recent.recovered - prevD.recovered);
    // data.wC = formatNumber(recent.confirmed - prevW.confirmed);
    // data.wD = formatNumber(recent.deaths - prevW.deaths);
    // data.wR = formatNumber(recent.recovered - prevW.recovered);
    // data.mC = formatNumber(recent.confirmed - prevM.confirmed);
    // data.mD = formatNumber(recent.deaths - prevM.deaths);
    // data.mR = formatNumber(recent.recovered - prevM.recovered);
    for (const key in data) {
        if (Object.hasOwnProperty.call(data, key)) {
            const value = data[key];
            $(`#${key}`).text(value);
        }
    }
    $("#covid-link").removeClass("d-none");
}


function displayPublicHolidays() {
    const public_holidays = countryData.public_holidays;
    //console.log(public_holidays.response);
    
   


    let data = {};
    html = "";
    for (var i = 0; i < public_holidays.response.holidays.length; i++) {
       
       
       // const da = new Date(public_holidays.response.holidays[i].date.iso,'mm-dd-yyyy');
       var dataeee = new Date(public_holidays.response.holidays[i].date.iso);
       var actual_date=dataeee.toLocaleString('en-GB').split(',');
      

        if (public_holidays.response.holidays[i].name) {
            html += "<tr><td>" + public_holidays.response.holidays[i].name + "</td><td>" + actual_date[0] + "</td></tr>";
        }


    }
    $('.public_holiday_classes').html(html);
}


function displaywikipedia() {
    const wiki_pediadetails = countryData.wikipedia_details;
    // console.log(wiki_pediadetails);

    // return false;
    // let data = {};
    // html = "";
    // for(var i = 0 ;i < wikipedia_details.length;i++){
    //     if(wiki_pediadetails[i].name){
    //         html+=wiki_pediadetails[i].name;
    //     }
    // }
    $('.wiki_detail').html(wiki_pediadetails);
}




function displayCovidOld() {

    const t = countryData.covid;

    let e = {};
    lastEntry = t.length - 1, recent = t[lastEntry], prevD = t[lastEntry - 1], prevW = t[lastEntry - 7], prevM = t[lastEntry - 30], e.latestDate = recent.date, e.tC = formatNumber(recent.confirmed), e.tD = formatNumber(recent.deaths), e.tR = formatNumber(recent.recovered), e.lC = formatNumber(recent.confirmed - prevD.confirmed), e.lD = formatNumber(recent.deaths - prevD.deaths), e.lR = formatNumber(recent.recovered - prevD.recovered), e.wC = formatNumber(recent.confirmed - prevW.confirmed), e.wD = formatNumber(recent.deaths - prevW.deaths), e.wR = formatNumber(recent.recovered - prevW.recovered), e.mC = formatNumber(recent.confirmed - prevM.confirmed), e.mD = formatNumber(recent.deaths - prevM.deaths), e.mR = formatNumber(recent.recovered - prevM.recovered);
    for (const t in e)
        if (Object.hasOwnProperty.call(e, t)) {
            const o = e[t];
            $(`#${t}`).text(o)
        } $("#covid-link").removeClass("d-none")
}

function displayMainCurrency() {

    // if(countryData.borders.properties.name == 'Zimbabwe')
    // {


    //     e ="$";
    //     o="USD";
    //     n="Zimbabwe";
    //     a="Cent";
    //     console.log(e);
    // let r = null;
    // e && a ? r = `(${e} / ${a})` : e && !a ? r = `(${e})` : !e && a && (r = `(${a})`);
    // const i = "EUR" === "USD" ? "svg\\Europe.svg" : countryData.rest.flag;
    // $("#countryCurrencyFlag").attr({
    //     src: i,
    //     alt: `${countryName} flag`
    // }), $("#countryCurrencyCode").text(o), $("#countryCurrency").html(`${n} ${r}`)


    // }
    // else{
    if (countryData.opencage.annotations.currency) {

        const t = countryData.opencage.annotations.currency,
            e = t.html_entity || t.symbol || null,
            o = t.iso_code || null,
            n = t.name || null,
            a = t.subunit || null;
        let r = null;
        e && a ? r = `(${e} / ${a})` : e && !a ? r = `(${e})` : !e && a && (r = `(${a})`);
        const i = "EUR" === t.iso_code ? "svg\\Europe.svg" : countryData.rest.flag;
        $("#countryCurrencyFlag").attr({
            src: i,
            alt: `${countryName} flag`
        }), $("#countryCurrencyCode").text(o), $("#countryCurrency").html(`${n} ${r}`)

    }
    // }
}
function displayCities() {
    const t = countryData.cities;
    let e = [];
    t.forEach(t => {
        const o = L.ExtraMarkers.icon({
            prefix: "fa",
            icon: "fa-city",
            markerColor: t.name === countryData.rest.capital ? "red" : "yellow"
        }),
            n = L.marker([t.coordinates.latitude, t.coordinates.longitude], {
                icon: o,
                title: t.name
            });
            const capital = t.name === countryData.rest.capital ? 'Capital' : '';
            n.bindPopup("<b>"+t.name+ "</b><br>"+capital+"<br>"+t.snippet)
        // n.on("click", function () {
        //     markerModal({
        //         title: t.name,
        //         summary: t.snippet,
        //         image: t.images ? t.images.sizes.thumbnail.url : null,
        //         wiki: t.wiki
        //     }), t.weather ? weather(t.weather) : $("#weather").addClass("d-none")
        // })
       
        // ,
         e.push(n)
    }), window.markers.addLayers(e).addTo(map)
}


function displayMountains() {
    let t = [];
    const e = L.ExtraMarkers.icon({
        prefix: "fa",
        icon: "fa-mountain",
        markerColor: "green"
    }),
        o = countryData.mountains;
    o.forEach(o => {
        const n = L.marker([o.coordinates.latitude, o.coordinates.longitude], {
            icon: e,
            title: o.name
        });
        n.bindPopup("<b>"+o.name+ "</b><br><br>"+o.snippet)

        t.push(n)
    }), window.markers.addLayers(t).addTo(map)
}

function displayPOIs() {
    const tp = countryData.POIs;
    let e = [];
    const o = L.ExtraMarkers.icon({
        prefix: "fa",
        icon: "fa-star",
        markerColor: "blue"
    });
    tp.forEach(tp => {
        const n = L.marker([tp.coordinates.latitude, tp.coordinates.longitude], {
            icon: o,
            title: tp.name
        });

        n.bindPopup("<b>"+tp.name+ "</b><br><br>"+tp.snippet)
        e.push(n)
    }), window.markers.addLayers(e).addTo(map)
}

function displayRates() {

    //     if(countryData.borders.properties.name == 'Zimbabwe')
    //     {


    //         e ="$";
    //         o = countryData.rates;}
    // else{
    if (countryData.opencage.annotations.currency) {
        const t = countryData.opencage.annotations.currency,
            e = (t.html_entity || t.symbol, t.iso_code || null),
            o = countryData.rates;
        // }
        for (const t in o.rates) {
            const n = Number(o.rates[t]).toFixed(3),
                a = o.flags[t];
            $(`#${t}Flag`).attr({
                src: a,
                alt: t + " flag"
            }), $(`#${t}Code`).text(t), $(`#${t}Rate`).text(n), $(`#${t}Row`).removeClass("d-none"), $("#financeTable").removeClass("d-none"), $("#ratesError").addClass("d-none"), t === e && $(`#${t}Row`).addClass("d-none")
        }
    }

    
}

function formatNumber(t) {
    return t > 1e9 ? (t / 1e9).toPrecision(2) + " billion" : t > 1e8 ? Math.round(t / 1e6) + " million" : t > 1e6 ? (t / 1e6).toPrecision(2) + " million" : t > 1e4 ? Math.round(t / 1e3) + ",000" : t
}

function geocode(t, e) {

    $.getJSON("php/api.php", {
        get: "geocode",
        lat: t,
        lng: e
    }, function (o, n) {
        o.country_code && getCountry({
            lat: t,
            lng: e
        })
    })
}

function getCountry({
    countryName: t,

    lat: e,
    lng: o
}) {

    $("#preloader").addClass("d-block") , resetMap();
    //&&  map.spin(!0)
    let n = {
        get: "country"
    };
    t ? n.country = t : e && o && (n.lat = e, n.lng = o), $.getJSON("php/api.php", n, function (t, n) {
        e && o && (window.countryName = t.opencage.components.country, window.countryCode = t.opencage.components.country_code), window.countryData = t, document.title = `Gazetteer | ${window.countryName}`, location.hash = window.countryName, t.opencage && t.rest && (t.borders && displayBorders(), displayCountryInfo(),t.rates ? displayRates() : ($("#financeTable").addClass("d-none"), $("#ratesError").removeClass("d-none")), t.mountains && displayMountains(), t.cities && displayCities(), t.POIs && displayPOIs(), t.covid ? displayCovid() : $("#covid-link").addClass("d-none"), t.public_holidays ? displayPublicHolidays() : $("#holidays-link").addClass("d-none"), t.wikipedia_details ? displaywikipedia() : $("#wikipedia-link").addClass("d-none"), window.infoButton.enable(), window.weatherButton.enable(), window.fiananceButton.enable(), window.covidButton.enable(), window.wikiButton.enable(), window.holidaysButton.enable())
    }).then(function () {
        $("#preloader").fadeOut() , map.spin(!1)
        $("#preloader").removeClass('d-block').addClass('d-none')
       
        
    })
}

function getCountryList() {

var parts = window.location.href.split('/');
var lastSegment = parts.pop() || parts.pop();

var selected_country = lastSegment.replace(/#/g,'');


//alert(selected_country);



    $.getJSON("php/api.php", {
        get: "countryList"
    }, function (t, e) {
        t.forEach(t => {
            const e = t[0].replace(/ /g, "-");
             if(e == selected_country)
             {
                 $("#countryList").append(`<option id="${e}"  selected value="${t[1]}" data="${t[1]}">${t[0]}</option>`)
             }

            
             else{
                 $("#countryList").append(`<option id="${e}"   value="${t[1]}" data="${t[1]}">${t[0]}</option>`)

             }
          
           
        })
    }).then(checkURLHash)
}

function init() {

    map.on("click", onMapClick), map.on("locationfound", onLocationFound), map.on("locationerror", onLocationError), L.control.attribution({
        prefix: '<a href="https://www.leafletjs.com" target="_blank">Leaflet</a>'
    }).addTo(map);
    const t = L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}", {
        attribution: "Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"
    }).addTo(map),
        e = L.tileLayer("https://map1.vis.earthdata.nasa.gov/wmts-webmerc/VIIRS_CityLights_2012/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}", {
            attribution: 'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (<a href="https://earthdata.nasa.gov" target="_blank">ESDIS</a>) with funding provided by NASA/HQ.',
            bounds: [
                [-85.0511287776, -179.999999975],
                [85.0511287776, 179.999999975]
            ],
            minZoom: 1,
            maxZoom: 8,
            format: "jpg",
            time: "",
            tilematrixset: "GoogleMapsCompatible_Level"
        }),
        o = L.tileLayer("https://{s}.tile.jawg.io/jawg-streets/{z}/{x}/{y}{r}.png?access-token=Kyyk5x2h2cziidv4NudH48i2lgxN5j1e3lo5CtRHb8th7m5mbfxeq7qB71thO2ZE", {
            attribution: '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors',
            minZoom: 0,
            maxZoom: 22,
            subdomains: "abcd",
            accessToken: "Kyyk5x2h2cziidv4NudH48i2lgxN5j1e3lo5CtRHb8th7m5mbfxeq7qB71thO2ZE"
        }),
        n = L.tileLayer("https://{s}.tile.jawg.io/jawg-dark/{z}/{x}/{y}{r}.png?access-token=Kyyk5x2h2cziidv4NudH48i2lgxN5j1e3lo5CtRHb8th7m5mbfxeq7qB71thO2ZE", {
            attribution: '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors',
            minZoom: 0,
            maxZoom: 22,
            subdomains: "abcd",
            accessToken: "Kyyk5x2h2cziidv4NudH48i2lgxN5j1e3lo5CtRHb8th7m5mbfxeq7qB71thO2ZE"
        }),
        a = {
            Streets: o,
            Dark: n,
            Satellite: t,
            Night: e
        };
    map.fitWorld(), addCountryListControl(), getCountryList(), L.control.zoom({
        position: "topright"
    })

        .addTo(map), L.easyButton("fa-location-arrow", function () {
            map.locate()
        }, {
            position: "topleft"
        })
            .addTo(map), L.control.layers(a).addTo(map), window.infoButton = L.easyButton("fa-info", function () {
                $("#countryModal").modal("toggle");
                $('#info-link').removeClass('d-block').addClass('d-none')
                $('#finance-link').removeClass('d-block').addClass('d-none')
                $('#weather-link').removeClass('d-block').addClass('d-none')
                $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                $('#covid-link').removeClass('d-block').addClass('d-none')
                $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                $('#holidays-link').removeClass('d-block').addClass('d-none')
                $('#holiday-title').removeClass('d-block').addClass('d-none')
                $('#info-link').addClass('d-block');
                $('#info-link').click();




            }, {

                position: "topleft"
            }).addTo(map).disable()

                .addTo(map), window.weatherButton = L.easyButton("fa-cloud", function () {
                    $("#countryModal").modal("toggle")

                    $('#info-link').removeClass('d-block').addClass('d-none')
                    $('#finance-link').removeClass('d-block').addClass('d-none')
                    $('#weather-link').removeClass('d-block').addClass('d-none')
                    $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                    $('#covid-link').removeClass('d-block').addClass('d-none')
                    $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                    $('#holidays-link').removeClass('d-block').addClass('d-none')
                    $('#holiday-title').removeClass('d-block').addClass('d-none')

                    $('#weather-link').addClass('d-block');
                    $('#weather-link').click();

                    weather(countryData.weather)

                }, {
                    position: "topleft"
                }).addTo(map).disable()


                    .addTo(map), window.fiananceButton = L.easyButton("fa-money", function () {
                        $("#countryModal").modal("toggle")

                        $('#info-link').removeClass('d-block').addClass('d-none')
                        $('#finance-link').removeClass('d-block').addClass('d-none')
                        $('#weather-link').removeClass('d-block').addClass('d-none')
                        $('#covid-link').removeClass('d-block').addClass('d-none')
                        $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                        $('#holidays-link').removeClass('d-block').addClass('d-none')
                        $('#holiday-title').removeClass('d-block').addClass('d-none')

                        $('#finance-link').addClass('d-block');
                        $('#finance-link').click();



                    }, {
                        position: "topleft"
                    }).addTo(map).disable()

                        .addTo(map), window.covidButton = L.easyButton("fa-virus", function () {
                            $("#countryModal").modal("toggle")

                            $('#info-link').removeClass('d-block').addClass('d-none')
                            $('#finance-link').removeClass('d-block').addClass('d-none')
                            $('#weather-link').removeClass('d-block').addClass('d-none')
                            $('#covid-link').removeClass('d-block').addClass('d-none')
                            $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                            $('#holidays-link').removeClass('d-block').addClass('d-none')
                            $('#holiday-title').removeClass('d-block').addClass('d-none')

                            $('#covid-link').addClass('d-block');
                            $('#covid-link').click();
                            displayCovid();

                        }, {
                            position: "topleft"
                        }).addTo(map).disable()

                            .addTo(map), window.wikiButton = L.easyButton("fa-book", function () {
                                $("#countryModal").modal("toggle")

                                $('#info-link').removeClass('d-block').addClass('d-none')
                                $('#finance-link').removeClass('d-block').addClass('d-none')
                                $('#weather-link').removeClass('d-block').addClass('d-none')
                                $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                                $('#covid-link').removeClass('d-block').addClass('d-none')
                                $('#holidays-link').removeClass('d-block').addClass('d-none')
                                $('#holiday-title').removeClass('d-block').addClass('d-none')
                               // $('#wikipedia-link').addClass('d-block');
                                $('#wikipedia-link').click();





                            }, {
                                position: "topleft"
                            }).addTo(map).disable()



                                .addTo(map), window.holidaysButton = L.easyButton("fa-bell", function () {
                                    $("#countryModal").modal("toggle")

                                    $('#info-link').removeClass('d-block').addClass('d-none')
                                    $('#finance-link').removeClass('d-block').addClass('d-none')
                                    $('#weather-link').removeClass('d-block').addClass('d-none')
                                    $('#wikipedia-link').removeClass('d-block').addClass('d-none')
                                    $('#covid-link').removeClass('d-block').addClass('d-none')
                                    $('#holidays-link').removeClass('d-block').addClass('d-none')
                                   
                                    $('#holiday-title').removeClass('d-none').addClass('d-block')
                                   
                                   
                                 //   $('#holidays-link').addClass('d-block');
                                    $('#holidays-link').click();

                                    displayPublicHolidays();


                                }, {
                                    position: "topleft"
                                }).addTo(map).disable()







    // .addTo(map), L.marker([51.5, -0.09]).addTo(map)
    // .bindPopup("Country Name")
    // .openPopup()




}

function markerModal({

    title: t,
    summary: e,
    image: o,
    wiki: n
}) {
    // if ($("#markerTitle").text(t), $("#markerSummary").html(e), t === countryData.rest.capital ? $("#markerCapital").removeClass("d-none") : $("#markerCapital").addClass("d-none"), o) {
    //     const e = o.replace("http", "https");
    //     $("#markerImg").attr({
    //         src: e,
    //         alt: t
    //     }).removeClass("d-none").addClass("d-block")
    // } else $("#markerImg").addClass("d-none").removeClass("d-block");
    // n ? ($("#markerLink").attr("href", n), $("#markerLink").removeClass("d-none")) : $("#markerLink").addClass("d-none"), $("#weather").addClass("d-none"), $("#markerModal").modal("toggle")
}

function onLocationError(t) {
    alert(t.message), 
    $("#preloader").fadeOut()
    $("#countryList").prop("selectedIndex", 1).change();

}

function onLocationFound(t) {
    const e = t.latlng.lat,
        o = t.latlng.lng;
    getCountry({
        lat: e,
        lng: o
    })
}

function onMapClick(t) {
    const e = t.latlng.lat % 90,
        o = t.latlng.lng > 180 ? t.latlng.lng - 360 : t.latlng.lng;
    geocode(e, o)
}

function resetMap() {
    window.borders && map.removeLayer(borders), window.markers.clearLayers(), window.infoButton && window.infoButton.disable(), window.weatherButton && window.weatherButton.disable(), window.fiananceButton && window.fiananceButton.disable(), window.covidButton && window.covidButton.disable(), window.wikiButton && window.wikiButton.disable(), window.holidaysButton && window.holidaysButton.disable()
}

function validateCountry(t,d=null) {
   
    //const e = t.replace(/ /g, "-");
    const ettt= $("#countryList option:selected").text();
    const e = ettt.replace(/ /g, "-");
   


    $(`#${e}`).length ? (window.countryName = ettt,
                 window.countryCode = $(`#${e}`).attr("data"), getCountry({
        countryName: countryName
    })) : alert("Not a valid country")

}

function weather(t) {

    $("#summaryIcon").attr("class", `wi wi-owm-${t.weather[0].id}`), $("#summaryText").text(t.weather[0].description);
    const e = Math.round(t.main.temp-273.15),
        o = Math.round(t.main.feels_like-273.15);
    $("#currentTemp").text(e), e !== o ? ($("#feelsLike").text(o), $("#feels").removeClass("d-none")) : $("#feels").addClass("d-none"), $("#maxTemp").text(Math.round(t.main.temp_max - 273.15)), $("#minTemp").text(Math.round(t.main.temp_min - 273.15)), $("#windSpeed").text(Math.round(t.wind.speed)), $("#windIcon").attr("class", `wi wi-wind from-${t.wind.deg}-deg`), $("#windDir").text(t.wind.deg), $("#humidity").text(t.main.humidity), $("#pressure").text(t.main.pressure), $("#sunrise").text(convertTime(t.sys.sunrise, t.timezone)), $("#sunset").text(convertTime(t.sys.sunset, t.timezone)), $("#weather").removeClass("d-none")
}
window.map = L.map("map", {
    attributionControl: !1,
    minZoom: 2,
    maxBounds: [
        [-180, -180],
        [180, 180]
    ],
    zoomControl: !1
}), window.markers = L.markerClusterGroup({
    showCoverageOnHover: !1
}), window.countryData = null, window.countryName = null, window.countryCode = null, window.infoButton = null, $(function () {
    init()

});
